Copy constructors

A copy constructor of class T is a non-template constructor whose first parameter is T&‍, const T&‍, volatile T&‍, or const volatile T&‍, and either there are no other 
parameters, or the rest of the parameters all have default values.

Syntax
class_name ( const class_name & )	(1)	
class_name ( const class_name & ) = default;	(2)	
class_name ( const class_name & ) = delete;	(3)	
Where class_name must name the current class (or current instantiation of a class template), or, when declared at namespace scope or in a 
friend declaration, it must be a qualified class name.

Explanation
1) Typical declaration of a copy constructor.
2) Forcing a copy constructor to be generated by the compiler.
3) Avoiding implicit generation of the copy constructor.
The copy constructor is called whenever an object is initialized (by direct-initialization or copy-initialization) from another object of 
the same type (unless overload resolution selects a better match or the call is elided), which includes

initialization: T a = b; or T a(b);, where b is of type T;
function argument passing: f(a);, where a is of type T and f is void f(T t);
function return: return a; inside a function such as T f(), where a is of type T, which has no move constructor.
